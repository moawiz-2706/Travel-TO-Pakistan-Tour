# name: CI/CD to Docker Hub and Minikube

# on:
#   push:
#     branches:
#       - master

# jobs:
#   deploy:
#     runs-on: self-hosted
#     env:
#       FRONTEND_IMAGE: "moawiz/travel-frontend:${{ github.sha }}"
#       BACKEND_IMAGE: "moawiz/travel-backend:${{ github.sha }}"
#       MINIKUBE_DRIVER: docker
#       KUBERNETES_VERSION: v1.26.3  # Pinned stable version

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Prerequisites Check
#         shell: powershell
#         run: |
#           # Verify Docker is installed
#           if (-not (Test-Path "C:\Program Files\Docker\Docker\Docker Desktop.exe")) {
#               throw "Docker Desktop not found at default location"
#           }

#           # Verify kubectl is available
#           if (-not (Get-Command kubectl -ErrorAction SilentlyContinue)) {
#               throw "kubectl not found in PATH"
#           }

#       - name: Full System Cleanup
#         shell: powershell
#         run: |
#           # Stop all containers
#           docker ps -aq | ForEach-Object { docker rm -f $_ }

#           # Full Minikube cleanup
#           minikube delete --all --purge
#           Remove-Item -Path "$HOME\.minikube" -Recurse -Force -ErrorAction SilentlyContinue

#           # Docker system cleanup
#           docker system prune -a -f
#           docker network prune -f

#       - name: Initialize Docker Environment
#         shell: powershell
#         run: |
#           # Start Docker Desktop if not running
#           if (-not (Get-Process "Docker Desktop" -ErrorAction SilentlyContinue)) {
#               Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe"
#               Start-Sleep -Seconds 30
#           }

#           # Wait for Docker to be ready
#           $retryCount = 0
#           $maxRetries = 10
#           while ($retryCount -lt $maxRetries) {
#               try {
#                   docker ps > $null 2>&1
#                   if ($LASTEXITCODE -eq 0) { break }
#               }
#               catch {
#                   $retryCount++
#                   if ($retryCount -ge $maxRetries) {
#                       throw "Docker failed to respond after $maxRetries attempts"
#                   }
#                   Start-Sleep -Seconds 10
#               }
#           }

#       - name: Setup Minikube Cluster
#         shell: powershell
#         run: |
#           # Initialize Minikube with explicit parameters
#           minikube start `
#             --driver=$env:MINIKUBE_DRIVER `
#             --kubernetes-version=$env:KUBERNETES_VERSION `
#             --cpus=2 `
#             --memory=4096 `
#             --disk-size=20g `
#             --force `
#             --wait=all `
#             --alsologtostderr

#           # Configure Docker to use Minikube's environment
#           minikube docker-env | Invoke-Expression

#           # Verify certificates
#           if (-not (Test-Path "$HOME\.minikube\certs\ca.pem")) {
#               minikube logs | Out-File -FilePath "minikube_logs.txt"
#               throw "Minikube certificates missing. See minikube_logs.txt"
#           }

#           # Enable addons
#           minikube addons enable ingress
#           minikube addons enable metrics-server

#       - name: Verify Cluster Status
#         shell: powershell
#         run: |
#           # Check Minikube status
#           minikube status
#           if ($LASTEXITCODE -ne 0) { throw "Minikube not running properly" }

#           # Check Kubernetes cluster
#           kubectl cluster-info
#           kubectl get pods -A

#       - name: Build and Push Frontend
#         uses: docker/build-push-action@v5
#         with:
#           context: ./travel-to-pakistan/frontend
#           push: true
#           tags: ${{ env.FRONTEND_IMAGE }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=production

#       - name: Build and Push Backend
#         uses: docker/build-push-action@v5
#         with:
#           context: ./travel-to-pakistan/backend
#           push: true
#           tags: ${{ env.BACKEND_IMAGE }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=production

#       - name: Deploy Application Stack
#         shell: powershell
#         run: |
#           # Create namespace
#           kubectl create namespace travel-app --dry-run=client -o yaml | kubectl apply -f -

#           # Deploy MongoDB
#           kubectl apply -f ./travel-to-pakistan/mongodb/ -n travel-app
#           kubectl wait --for=condition=ready pod -l app=mongodb -n travel-app --timeout=300s

#           # Deploy backend and frontend
#           kubectl apply -f ./travel-to-pakistan/backend/ -n travel-app
#           kubectl apply -f ./travel-to-pakistan/frontend/ -n travel-app

#           # Expose services
#           kubectl expose deployment frontend -n travel-app --type=NodePort --port=80
#           kubectl expose deployment backend -n travel-app --type=NodePort --port=3000

#           # Print service information
#           minikube service list -n travel-app

#       - name: Run Smoke Tests
#         shell: powershell
#         run: |
#           $frontendUrl = minikube service frontend -n travel-app --url
#           $backendUrl = minikube service backend -n travel-app --url

#           function Test-Service {
#               param($url, $endpoint)
#               $retry = 0
#               while ($retry -lt 5) {
#                   try {
#                       $response = Invoke-WebRequest "$url$endpoint" -UseBasicParsing -TimeoutSec 10
#                       if ($response.StatusCode -eq 200) { return $true }
#                   } catch {
#                       Write-Output "Attempt $($retry + 1) failed: $($_.Exception.Message)"
#                   }
#                   $retry++
#                   Start-Sleep -Seconds 10
#               }
#               return $false
#           }

#           if (-not (Test-Service $frontendUrl "/health")) { throw "Frontend health check failed" }
#           if (-not (Test-Service $backendUrl "/api/health")) { throw "Backend health check failed" }

name: CI/CD to Docker Hub and Minikube

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    env:
      FRONTEND_IMAGE: "moawiz/travel-frontend:${{ github.sha }}"
      BACKEND_IMAGE: "moawiz/travel-backend:${{ github.sha }}"
      MINIKUBE_DRIVER: docker
      KUBERNETES_VERSION: v1.26.3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify and Start Docker
        shell: powershell
        run: |
          # Check Docker Desktop installation
          if (-not (Test-Path "C:\Program Files\Docker\Docker\Docker Desktop.exe")) {
              throw "Docker Desktop not found at default location"
          }

          # Kill any stuck Docker processes
          Get-Process "Docker Desktop" -ErrorAction SilentlyContinue | Stop-Process -Force
          Start-Sleep -Seconds 5

          # Start Docker Desktop with elevated privileges
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = "C:\Program Files\Docker\Docker\Docker Desktop.exe"
          $psi.Verb = "runas"  # Run as administrator
          [System.Diagnostics.Process]::Start($psi) | Out-Null

          # Extended wait with progressive checks
          $maxWait = 120
          $waitInterval = 5
          $totalWaited = 0
          $dockerReady = $false

          while ($totalWaited -lt $maxWait) {
              try {
                  docker version --format '{{.Server.Version}}' 2>$null
                  if ($LASTEXITCODE -eq 0) {
                      $dockerReady = $true
                      break
                  }
              } catch {}
              
              Write-Output "Waiting for Docker to start... ($totalWaited/$maxWait seconds)"
              Start-Sleep -Seconds $waitInterval
              $totalWaited += $waitInterval
          }

          if (-not $dockerReady) {
              # Collect diagnostic information
              Get-Process "Docker Desktop" | Format-List *
              docker info
              throw "Docker failed to start after $maxWait seconds"
          }

          Write-Output "Docker started successfully"

      - name: Clean System State
        shell: powershell
        run: |
          # Clean containers only if Docker is responsive
          docker ps -aq | ForEach-Object { docker rm -f $_ } 2>$null
          docker system prune -a -f 2>$null

          # Clean Minikube if exists
          if (Get-Command minikube -ErrorAction SilentlyContinue) {
              minikube delete --all --purge 2>$null
              Remove-Item -Path "$HOME\.minikube" -Recurse -Force -ErrorAction SilentlyContinue
          }

      - name: Initialize Minikube
        shell: powershell
        run: |
          minikube start `
            --driver=$env:MINIKUBE_DRIVER `
            --kubernetes-version=$env:KUBERNETES_VERSION `
            --cpus=2 `
            --memory=4096 `
            --disk-size=20g `
            --wait=all `
            --alsologtostderr


          minikube addons enable ingress
          minikube addons enable metrics-server
          minikube docker-env | Invoke-Expression
  

      - name: Verify Environment
        shell: powershell
        run: |
          docker ps
          minikube status
          kubectl cluster-info

      

      - name: Verify Cluster
        shell: powershell
        run: |
          minikube status
          kubectl cluster-info
          kubectl get pods -A

      - name: Build and Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy Application
        shell: powershell
        run: |
          kubectl create namespace travel-app --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f ./travel-to-pakistan/mongodb/ -n travel-app
          kubectl wait --for=condition=ready pod -l app=mongodb -n travel-app --timeout=300s
          kubectl apply -f ./travel-to-pakistan/backend/ -n travel-app
          kubectl apply -f ./travel-to-pakistan/frontend/ -n travel-app
          kubectl expose deployment frontend -n travel-app --type=NodePort --port=80
          kubectl expose deployment backend -n travel-app --type=NodePort --port=3000
          minikube service list -n travel-app

      - name: Smoke Tests
        shell: powershell
        run: |
          $frontendUrl = minikube service frontend -n travel-app --url
          $backendUrl = minikube service backend -n travel-app --url

          function Test-Service {
              param($url, $endpoint)
              $retry = 0
              while ($retry -lt 5) {
                  try {
                      $response = Invoke-WebRequest "$url$endpoint" -UseBasicParsing -TimeoutSec 10
                      if ($response.StatusCode -eq 200) { return $true }
                  } catch {
                      $retry++
                      Start-Sleep -Seconds 10
                  }
              }
              return $false
          }

          if (-not (Test-Service $frontendUrl "/health")) { throw "Frontend health check failed" }
          if (-not (Test-Service $backendUrl "/api/health")) { throw "Backend health check failed" }