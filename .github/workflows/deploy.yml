name: CI/CD to Docker Hub and Minikube

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    env:
      FRONTEND_IMAGE: "moawiz/travel-frontend:${{ github.sha }}"
      BACKEND_IMAGE: "moawiz/travel-backend:${{ github.sha }}"
      MINIKUBE_DRIVER: hyperv

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure System Paths
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\Docker\Docker\resources\bin"
          $env:Path += ";C:\Program Files\Git\cmd"
          $env:Path += ";C:\kubectl"

      - name: Clean Environment
        shell: powershell
        run: |
          minikube delete --all --purge
          Remove-Item -Path "$HOME\.minikube" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$HOME\.docker" -Recurse -Force -ErrorAction SilentlyContinue
          docker context rm minikube -f

      - name: Configure Firewall Rules
        shell: powershell
        run: |
          Remove-NetFirewallRule -Name "Minikube*" -ErrorAction SilentlyContinue
          New-NetFirewallRule -Name "MinikubeDocker" -DisplayName "Minikube Docker" `
            -Direction Inbound -Protocol TCP -LocalPort 2376 -Action Allow
          New-NetFirewallRule -Name "MinikubeAPI" -DisplayName "Minikube API" `
            -Direction Inbound -Protocol TCP -LocalPort 8443 -Action Allow

      - name: Initialize Minikube Cluster
        shell: powershell
        run: |
          minikube start `
            --driver=$env:MINIKUBE_DRIVER `
            --cni=flannel `
            --memory=4096 `
            --cpus=2 `
            --disk-size=20g `
            --force `
            --wait-timeout=10m `
            --extra-config=kubelet.cgroup-driver=systemd

          minikube addons enable ingress --wait=all
          minikube addons enable metrics-server
          
          $env:MINIKUBE_IP = minikube ip
          "MINIKUBE_IP=$env:MINIKUBE_IP" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Output "Minikube IP: $env:MINIKUBE_IP"

      - name: Configure Docker Integration
        shell: powershell
        run: |
          # Get and set Docker environment variables
          $dockerEnv = minikube docker-env --shell powershell
          $dockerEnv | ForEach-Object {
              if ($_ -match '\$Env:([^=]+)\s*=\s*"([^"]+)"') {
                  $varName = $matches[1]
                  $varValue = $matches[2]
                  "$varName=$varValue" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
              }
          }

          
          docker context create minikube `
            --docker "host=$env:DOCKER_HOST,ca=$env:DOCKER_CERT_PATH/ca.pem,cert=$env:DOCKER_CERT_PATH/cert.pem,key=$env:DOCKER_CERT_PATH/key.pem"
          
          docker context use minikube
          Write-Output "Current Docker contexts:"
          docker context ls

      - name: Validate Docker Connection
        shell: powershell
        run: |
          Write-Output "Testing Docker connection..."
          docker info
          docker buildx create --use
          docker run --rm hello-world


      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/frontend
          tags: ${{ env.FRONTEND_IMAGE }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_HOST: ${{ env.DOCKER_HOST }}
          DOCKER_TLS_VERIFY: ${{ env.DOCKER_TLS_VERIFY }}
          DOCKER_CERT_PATH: ${{ env.DOCKER_CERT_PATH }}

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/backend
          tags: ${{ env.BACKEND_IMAGE }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_HOST: ${{ env.DOCKER_HOST }}
          DOCKER_TLS_VERIFY: ${{ env.DOCKER_TLS_VERIFY }}
          DOCKER_CERT_PATH: ${{ env.DOCKER_CERT_PATH }}

      - name: Deploy Kubernetes Stack
        shell: powershell
        run: |
          # Create namespace
          kubectl create namespace travel-app --dry-run=client -o yaml | kubectl apply -f -

          # Create secrets
          kubectl create secret generic app-secrets -n travel-app `
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" `
            --from-literal=GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" `
            --from-literal=GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" `
            --dry-run=client -o yaml | kubectl apply -f -

          # Deploy MongoDB
          kubectl apply -f ./travel-to-pakistan/mongodb/ -n travel-app
          kubectl wait --for=condition=ready pod -l app=mongodb -n travel-app --timeout=300s

          # Deploy application components
          kubectl apply -f ./travel-to-pakistan/backend/ -n travel-app
          kubectl apply -f ./travel-to-pakistan/frontend/ -n travel-app

          # Expose services
          kubectl expose deployment frontend -n travel-app --type=NodePort --port=80
          kubectl expose deployment backend -n travel-app --type=NodePort --port=3000

          # Verify deployment
          kubectl get all -n travel-app
          minikube service list -n travel-app

      - name: Smoke Tests
        shell: powershell
        run: |
          $frontendUrl = minikube service frontend -n travel-app --url
          $backendUrl = minikube service backend -n travel-app --url


          $maxRetries = 5
          $retryInterval = 15

          function Test-Endpoint {
              param($url)
              $retryCount = 0
              while ($retryCount -lt $maxRetries) {
                  try {
                      $response = Invoke-WebRequest $url -UseBasicParsing -TimeoutSec 30
                      if ($response.StatusCode -eq 200) { return $true }
                  } catch {
                      Write-Output "Attempt $($retryCount+1)/$maxRetries failed for $url"
                  }
                  $retryCount++
                  Start-Sleep -Seconds $retryInterval
              }
              return $false
          }

          if (-not (Test-Endpoint "$frontendUrl/health")) { throw "Frontend health check failed" }
          if (-not (Test-Endpoint "$backendUrl/api/health")) { throw "Backend health check failed" }