name: CI/CD to Docker Hub and Minikube

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    env:
      FRONTEND_IMAGE: moawiz/travel-frontend:${{ github.sha }}
      BACKEND_IMAGE: moawiz/travel-backend:${{ github.sha }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Stop Docker Desktop (optional, if conflicts occur)
        run: |
          Stop-Service -Name "com.docker.service" -ErrorAction SilentlyContinue
        shell: powershell

      - name: Reset Docker Contexts
        run: |
          Remove-Item -Path "$HOME\.docker\contexts" -Recurse -Force -ErrorAction SilentlyContinue
          docker context use default
        shell: powershell

      - name: Start Minikube
        run: |
          minikube status; if ($LASTEXITCODE -ne 0) { minikube start --driver=docker }
        shell: powershell

      - name: Verify Minikube API Server
        run: |
          kubectl cluster-info; if ($LASTEXITCODE -ne 0) { Write-Output "Minikube API server not reachable"; minikube stop; minikube start --driver=docker; exit 1 }
        shell: powershell

      - name: Set up Docker to use Minikube's environment
        run: |
          & minikube docker-env --shell powershell | Invoke-Expression
          $minikubeIp = minikube ip
          docker context create minikube --docker "host=tcp://$minikubeIp:2376,ca=$HOME\.minikube\ca.crt,cert=$HOME\.minikube\certs\cert.pem,key=$HOME\.minikube\certs\key.pem" --description "Minikube Docker"
          docker context use minikube
        shell: powershell

      - name: Test Docker connection to Minikube
        run: |
          docker info --format '{{.ServerVersion}}'; if ($LASTEXITCODE -ne 0) { Write-Output "Docker daemon not reachable"; & minikube docker-env --shell powershell | Invoke-Expression; docker context use minikube; docker info --format '{{.ServerVersion}}'; if ($LASTEXITCODE -ne 0) { exit 1 } }
        shell: powershell

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}

      - name: Build and push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}

      - name: Update Kubernetes manifests with image tags
        run: |
          (Get-Content ".\travel-to-pakistan\backend\deployment.yaml") -replace 'moawiz/travel-backend:latest', 'moawiz/travel-backend:${{ github.sha }}' | Set-Content ".\travel-to-pakistan\backend\deployment.yaml"
          (Get-Content ".\travel-to-pakistan\frontend\deployment.yaml") -replace 'moawiz/travel-frontend:latest', 'moawiz/travel-frontend:${{ github.sha }}' | Set-Content ".\travel-to-pakistan\frontend\deployment.yaml"
        shell: powershell

      - name: Create Kubernetes Secrets
        run: |
          kubectl create namespace travel-app-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic google-secrets `
            --from-literal=GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" `
            --from-literal=GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" `
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" `
            -n travel-app-namespace --dry-run=client -o yaml | kubectl apply -f -
        shell: powershell

      - name: Deploy to Minikube
        run: |
          kubectl apply -f ".\travel-to-pakistan\mongodb\pvc.yaml"
          kubectl apply -f ".\travel-to-pakistan\mongodb\deployment.yaml"
          kubectl apply -f ".\travel-to-pakistan\mongodb\service.yaml"
          kubectl apply -f ".\travel-to-pakistan\backend\deployment.yaml"
          kubectl apply -f ".\travel-to-pakistan\backend\service.yaml"
          kubectl apply -f ".\travel-to-pakistan\frontend\deployment.yaml"
          kubectl apply -f ".\travel-to-pakistan\frontend\service.yaml"
        shell: powershell