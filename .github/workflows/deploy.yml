name: CI/CD to Docker Hub and Minikube

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    env:
      FRONTEND_IMAGE: moawiz/travel-frontend:${{ github.sha }}
      BACKEND_IMAGE: moawiz/travel-backend:${{ github.sha }}
      MINIKUBE_DRIVER: hyperv
      DOCKER_CERT_PATH: ${{ github.workspace }}/.minikube/certs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure System Paths
        run: |
          $env:Path += ";C:\Program Files\Docker\Docker\resources\bin"
          $env:Path += ";C:\Program Files\Git\cmd"
          $env:Path += ";C:\kubectl"

      - name: Clean Docker Environment
        run: |
          Stop-Service -Name "com.docker.service" -ErrorAction SilentlyContinue
          Remove-Item -Path "$HOME\.docker\contexts" -Recurse -Force -ErrorAction SilentlyContinue
          docker context use default
        shell: powershell

      - name: Configure Firewall Rules
        run: |
          Remove-NetFirewallRule -Name "Minikube*" -ErrorAction SilentlyContinue
          New-NetFirewallRule -Name "MinikubeDocker" -DisplayName "Minikube Docker" `
            -Direction Inbound -Protocol TCP -LocalPort 2376 -Action Allow
          New-NetFirewallRule -Name "MinikubeAPI" -DisplayName "Minikube API" `
            -Direction Inbound -Protocol TCP -LocalPort 8443 -Action Allow
        shell: powershell

      - name: Initialize Minikube Cluster
        run: |
          minikube delete --all --purge
          minikube start `
            --driver=$env:MINIKUBE_DRIVER `
            --network-plugin=cni `
            --cni=flannel `
            --memory=4096 `
            --cpus=2 `
            --disk-size=20g `
            --force
          
          minikube addons enable ingress
          minikube addons enable metrics-server
          
          $env:MINIKUBE_IP = minikube ip
          "MINIKUBE_IP=$env:MINIKUBE_IP" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: powershell

      - name: Configure Docker-Minikube Integration
        run: |
          # Generate and persist environment variables
          minikube docker-env | ForEach-Object {
            if ($_ -match "export (.*)=\"(.*)\"") {
              $varName = $matches[1]
              $varValue = $matches[2]
              "$varName=$varValue" | Out-File -FilePath $env:GITHUB_ENV -Append
            }
          }

          # Verify certificates
          if (-not (Test-Path "$env:DOCKER_CERT_PATH\ca.pem")) {
            throw "Missing Minikube TLS certificates"
          }

          # Permanent Docker configuration
          docker context create minikube `
            --docker "host=tcp://$env:MINIKUBE_IP:2376,ca=$env:DOCKER_CERT_PATH/ca.pem,cert=$env:DOCKER_CERT_PATH/cert.pem,key=$env:DOCKER_CERT_PATH/key.pem"
          
          docker context use minikube
        shell: powershell

      - name: Validate Docker Connection
        run: |
          docker info
          docker buildx create --use
          docker run --rm hello-world
        shell: powershell

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/frontend
          tags: ${{ env.FRONTEND_IMAGE }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_HOST: tcp://${{ env.MINIKUBE_IP }}:2376
          DOCKER_TLS_VERIFY: 1
          DOCKER_CERT_PATH: ${{ env.DOCKER_CERT_PATH }}

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/backend
          tags: ${{ env.BACKEND_IMAGE }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_HOST: tcp://${{ env.MINIKUBE_IP }}:2376
          DOCKER_TLS_VERIFY: 1
          DOCKER_CERT_PATH: ${{ env.DOCKER_CERT_PATH }}

      - name: Deploy Kubernetes Stack
        run: |
          # Create namespace if not exists
          kubectl create namespace travel-app --dry-run=client -o yaml | kubectl apply -f -

          # Secret management
          kubectl create secret generic app-secrets -n travel-app `
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" `
            --from-literal=GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" `
            --from-literal=GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" `
            --dry-run=client -o yaml | kubectl apply -f -

          # Database first
          kubectl apply -f ./travel-to-pakistan/mongodb/ -n travel-app
          
          # Wait for MongoDB readiness
          kubectl wait --for=condition=ready pod -l app=mongodb -n travel-app --timeout=120s

          # Application components
          kubectl apply -f ./travel-to-pakistan/backend/ -n travel-app
          kubectl apply -f ./travel-to-pakistan/frontend/ -n travel-app

          # Expose services
          kubectl expose deployment frontend -n travel-app --type=NodePort --port=80
          kubectl expose deployment backend -n travel-app --type=NodePort --port=3000

          # Get endpoints
          minikube service list -n travel-app
        shell: powershell

      - name: Smoke Tests
        run: |
          $frontendUrl = minikube service frontend -n travel-app --url
          $backendUrl = minikube service backend -n travel-app --url

          Invoke-WebRequest "$frontendUrl/health" -UseBasicParsing
          Invoke-WebRequest "$backendUrl/api/health" -UseBasicParsing
        shell: powershell