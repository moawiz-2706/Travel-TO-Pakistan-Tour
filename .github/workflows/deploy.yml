name: CI/CD to Docker Hub and Minikube

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    env:
      FRONTEND_IMAGE: moawiz/travel-frontend:${{ github.sha }}
      BACKEND_IMAGE: moawiz/travel-backend:${{ github.sha }}
      MINIKUBE_DRIVER: hyperv
      DOCKER_CERT_PATH: ${{ runner.user.home }}\.minikube\certs  # Changed to user home

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure System Paths
        run: |
          $env:Path += ";C:\Program Files\Docker\Docker\resources\bin"
          $env:Path += ";C:\Program Files\Git\cmd"
          $env:Path += ";C:\kubectl"

      - name: Clean Docker Environment
        run: |
          Stop-Service -Name "com.docker.service" -ErrorAction SilentlyContinue
          Remove-Item -Path "$HOME\.docker\contexts" -Recurse -Force -ErrorAction SilentlyContinue
          docker context use default
        shell: powershell

      - name: Configure Firewall Rules
        run: |
          Remove-NetFirewallRule -Name "Minikube*" -ErrorAction SilentlyContinue
          New-NetFirewallRule -Name "MinikubeDocker" -DisplayName "Minikube Docker" `
            -Direction Inbound -Protocol TCP -LocalPort 2376 -Action Allow
          New-NetFirewallRule -Name "MinikubeAPI" -DisplayName "Minikube API" `
            -Direction Inbound -Protocol TCP -LocalPort 8443 -Action Allow
        shell: powershell

      - name: Initialize Minikube Cluster
        run: |
          minikube delete --all --purge
          minikube start `
            --driver=$env:MINIKUBE_DRIVER `
            --network-plugin=cni `
            --cni=flannel `
            --memory=4096 `
            --cpus=2 `
            --disk-size=20g `
            --force
          
          minikube addons enable ingress
          minikube addons enable metrics-server
          
          $env:MINIKUBE_IP = minikube ip
          "MINIKUBE_IP=$env:MINIKUBE_IP" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Output "Minikube IP: $env:MINIKUBE_IP"
        shell: powershell

      - name: Configure Docker-Minikube Integration
        run: |
          # Get and persist environment variables
          $envVars = minikube docker-env --shell powershell
          Write-Output "Raw docker-env output: $envVars"
          
          $envVars | ForEach-Object {
              if ($_ -match '\$Env:([^=]+)\s*=\s*"([^"]+)"') {
                  $varName = $matches[1]
                  $varValue = $matches[2]
                  Write-Output "Found variable: $varName"
                  "$varName=$varValue" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
              }
          }

          # Verify certificates
          if (-not (Test-Path "$env:DOCKER_CERT_PATH\ca.pem")) {
              throw "Missing CA certificate at $env:DOCKER_CERT_PATH"
          }
          if (-not (Test-Path "$env:DOCKER_CERT_PATH\cert.pem")) {
              throw "Missing client certificate at $env:DOCKER_CERT_PATH"
          }

          # Configure Docker context
          docker context create minikube `
            --docker "host=tcp://$env:MINIKUBE_IP:2376,ca=$env:DOCKER_CERT_PATH/ca.pem,cert=$env:DOCKER_CERT_PATH/cert.pem,key=$env:DOCKER_CERT_PATH/key.pem"
          
          docker context use minikube
          Write-Output "Current Docker contexts:"
          docker context ls
        shell: powershell

      - name: Validate Docker Connection
        run: |
          Write-Output "Docker environment variables:"
          Get-ChildItem Env: | Where-Object { $_.Name -like "DOCKER_*" }
          
          Write-Output "Testing Docker connection..."
          docker info
          docker buildx create --use
          docker run --rm hello-world
        shell: powershell

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/frontend
          tags: ${{ env.FRONTEND_IMAGE }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_HOST: tcp://${{ env.MINIKUBE_IP }}:2376
          DOCKER_TLS_VERIFY: 1
          DOCKER_CERT_PATH: ${{ env.DOCKER_CERT_PATH }}

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./travel-to-pakistan/backend
          tags: ${{ env.BACKEND_IMAGE }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_HOST: tcp://${{ env.MINIKUBE_IP }}:2376
          DOCKER_TLS_VERIFY: 1
          DOCKER_CERT_PATH: ${{ env.DOCKER_CERT_PATH }}

      - name: Deploy Kubernetes Stack
        run: |
          # Create namespace
          kubectl create namespace travel-app --dry-run=client -o yaml | kubectl apply -f -

          # Create secrets
          kubectl create secret generic app-secrets -n travel-app `
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" `
            --from-literal=GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" `
            --from-literal=GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" `
            --dry-run=client -o yaml | kubectl apply -f -

          # Deploy MongoDB
          kubectl apply -f ./travel-to-pakistan/mongodb/ -n travel-app
          kubectl wait --for=condition=ready pod -l app=mongodb -n travel-app --timeout=300s

          # Deploy backend and frontend
          kubectl apply -f ./travel-to-pakistan/backend/ -n travel-app
          kubectl apply -f ./travel-to-pakistan/frontend/ -n travel-app

          # Expose services
          kubectl expose deployment frontend -n travel-app --type=NodePort --port=80
          kubectl expose deployment backend -n travel-app --type=NodePort --port=3000

          # Verify services
          kubectl get pods,svc -n travel-app
          minikube service list -n travel-app
        shell: powershell

      - name: Smoke Tests
        run: |
          $frontendUrl = minikube service frontend -n travel-app --url
          $backendUrl = minikube service backend -n travel-app --url
          Write-Output "Frontend URL: $frontendUrl"
          Write-Output "Backend URL: $backendUrl"

          # Add retry logic
          $maxRetries = 5
          $retryCount = 0
          $success = $false

          while (-not $success -and $retryCount -lt $maxRetries) {
              try {
                  Invoke-WebRequest "$frontendUrl/health" -UseBasicParsing -TimeoutSec 30
                  Invoke-WebRequest "$backendUrl/api/health" -UseBasicParsing -TimeoutSec 30
                  $success = $true
              } catch {
                  $retryCount++
                  Write-Output "Attempt $retryCount failed. Retrying in 10 seconds..."
                  Start-Sleep -Seconds 10
              }
          }

          if (-not $success) {
              throw "Smoke tests failed after $maxRetries attempts"
          }
        shell: powershell